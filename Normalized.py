# -*- coding: utf-8 -*-
"""Untitled45.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OGYLB7Spvct4A02ECeKtmjb31edkjd4f
"""

file_path = "BANA WEEK 3A.csv"
df = pd.read_csv(file_path, encoding="ISO-8859-1")

# Normalize Countries Table
countries_table = df[["Country Name", "Country Code"]].drop_duplicates()
countries_table.rename(columns={"Country Name": "country_name", "Country #Code": "country_code"}, inplace=True)

# ✅ Step 3: Normalize Indicators Table
indicators_table = df[["Series Name", "Series Code"]].drop_duplicates()
indicators_table.rename(columns={"Series Name": "indicator_name", "Series Code": "indicator_code"}, inplace=True)
indicators_table.insert(0, "indicator_id", range(1, len(indicators_table) + 1))

# ✅ Step 4: Convert Year Columns into Long Format
df_long = df.melt(id_vars=["Country Name", "Country Code", "Series Name", "Series Code"],
                  var_name="Year",
                  value_name="Value")

# ✅ Step 5: Extract Year from Column Names
df_long["Year"] = df_long["Year"].str.extract(r"(\d{4})")

# ✅ Step 6: Rename Columns for Consistency
df_long.rename(columns={
    "Country Name": "country_name",
    "Country Code": "country_code",
    "Series Name": "indicator_name",
    "Series Code": "indicator_code",
    "Year": "year",
    "Value": "value"
}, inplace=True)

# ✅ Step 7: Replace Indicator Names with Foreign Keys
df_normalized = df_long.merge(indicators_table, left_on="indicator_name", right_on="indicator_name", how="left")
df_normalized = df_normalized[["country_code", "year", "indicator_id", "value"]]

# ✅ Step 8: Split Data into Separate Tables
category_mappings = {
    "Economic Indicators": ["GDP", "inflation", "trade_balance", "foreign_direct_investment", "government_spending"],
    "Social Indicators": ["life_expectancy", "literacy_rate", "poverty_rate", "unemployment_rate", "access_to_clean_water"],
    "Public Debt Indicators": ["total_government_debt", "debt_to_gdp_ratio", "interest_payments", "external_debt_stocks"],
    "Environmental Indicators": ["co2_emissions", "renewable_energy_consumption", "access_to_electricity", "forest_area"],
    "Statistical Indicators": ["money_supply_m2", "exchange_rate"]  # ✅ Fixed formatting
}

# ✅ Step 9: Create Normalized Tables
normalized_tables = {}
for table, indicators in category_mappings.items():
    normalized_tables[table] = df_normalized[df_normalized["indicator_id"].isin(
        indicators_table[indicators_table["indicator_name"].str.contains('|'.join(indicators), case=False, na=False)]["indicator_id"]
    )]

# ✅ Save Normalized Data in the Current Directory
countries_table.to_csv("Normalized_Countries.csv", index=False, encoding="ISO-8859-1")
indicators_table.to_csv("Normalized_Indicators.csv", index=False, encoding="ISO-8859-1")

for table, df in normalized_tables.items():
    file_path = f"Normalized_{table.replace(' ', '_')}.csv"
    df.to_csv(file_path, index=False, encoding="ISO-8859-1")

print("✅ Normalization Complete! All files saved in the current directory.")

import os
print(os.getcwd())  # Shows current directory
print(os.listdir())  # Lists all files in the current directory

from google.colab import files
files.download("Normalized_Countries.csv")  # Example for one file